---
AWSTemplateFormatVersion: 2010-09-09
Description: "Warehouse Web Server"
Parameters:
  Port:
    Type: String
    Default: 80
  VpcName:
    Description: Name for VPC
    Type: String
    Default: VPC
  CidrBlock:
    Description: CIDR IP address block to use for this VPC
    Type: String
    Default: 10.100.0.0/16
    AllowedPattern: "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/\\d{1,2}"
    ConstraintDescription: "Must be a valid CIDR address block"
  SubnetAvailabilityZone1:
    Description: Availability zone
    Type: String
    Default: "us-east-1b"
  SubnetCidrBlock1:
    Description: CIDR IP address block to use for this subnet
    Type: String
    Default: 10.100.0.0/22
    AllowedPattern: "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/\\d{1,2}"
    ConstraintDescription: Must be a valid CIDR address block
  SubnetAssignPublicIp1:
    Description: Assign new instances a public IP by default
    Type: String
    Default: "Yes"
    AllowedValues: [ "Yes", "No" ]
    ConstraintDescription: You must specify true or false

  SubnetAvailabilityZone2:
    Description: Availability zone
    Type: String
    Default: "us-east-1c"
  SubnetCidrBlock2:
    Description: CIDR IP address block to use for this subnet
    Type: String
    Default: 10.100.4.0/22
    AllowedPattern: "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/\\d{1,2}"
    ConstraintDescription: Must be a valid CIDR address block
  SubnetAssignPublicIp2:
    Description: Assign new instances a public IP by default
    Type: String
    Default: "Yes"
    AllowedValues: [ "Yes", "No" ]
    ConstraintDescription: You must specify true or false

  SubnetAvailabilityZone3:
    Description: Availability zone
    Type: String
    Default: "us-east-1d"
  SubnetCidrBlock3:
    Description: CIDR IP address block to use for this subnet
    Type: String
    Default: 10.100.8.0/22
    AllowedPattern: "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/\\d{1,2}"
    ConstraintDescription: Must be a valid CIDR address block
  SubnetAssignPublicIp3:
    Description: Assign new instances a public IP by default
    Type: String
    Default: "Yes"
    AllowedValues: [ "Yes", "No" ]
    ConstraintDescription: You must specify true or false

  SubnetAvailabilityZone4:
    Description: Availability zone
    Type: String
    Default: "us-east-1e"
  SubnetCidrBlock4:
    Description: CIDR IP address block to use for this subnet
    Type: String
    Default: 10.100.12.0/22
    AllowedPattern: "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/\\d{1,2}"
    ConstraintDescription: Must be a valid CIDR address block
  SubnetAssignPublicIp4:
    Description: Assign new instances a public IP by default
    Type: String
    Default: "Yes"
    AllowedValues: [ "Yes", "No" ]
    ConstraintDescription: You must specify true or false
Conditions:
  ProvisionSubnet1: !Not [!Equals [SubnetAvailabilityZone1, ""]]
  EnablePublicIp1: !Equals [SubnetAssignPublicIp1, "Yes"]

  ProvisionSubnet2: !Not [!Equals [SubnetAvailabilityZone2, ""]]
  EnablePublicIp2: !Equals [SubnetAssignPublicIp2, "Yes"]

  ProvisionSubnet3: !Not [!Equals [SubnetAvailabilityZone3, ""]]
  EnablePublicIp3: !Equals [SubnetAssignPublicIp3, "Yes"]

  ProvisionSubnet4: !Not [!Equals [SubnetAvailabilityZone4, ""]]
  EnablePublicIp4: !Equals [SubnetAssignPublicIp4, "Yes"]
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Global Settings
      Parameters:
      - VpcName
      - CidrBlock
    - Label:
        default: Subnet Settings
      Parameters:
      - SubnetAvailabilityZone1
      - SubnetCidrBlock1
      - SubnetAssignPublicIp1

      - SubnetAvailabilityZone2
      - SubnetCidrBlock2
      - SubnetAssignPublicIp2

      - SubnetAvailabilityZone3
      - SubnetCidrBlock3
      - SubnetAssignPublicIp3

      - SubnetAvailabilityZone4
      - SubnetCidrBlock4
      - SubnetPublicI4
    ParameterLabels:
      VpcName:
        default: "VPC Name"
      CidrBlock:
        default: "CIDR Block"

      SubnetAvailabilityZone1:
        default: "Subnet 1: AZ"
      SubnetCidrBlock1:
        default: "Subnet 1: CIDR Block"
      SubnetAssignPublicIp1:
        default: "Subnet 1: Map Public IP"

      SubnetAvailabilityZone2:
        default: "Subnet 2: AZ"
      SubnetCidrBlock2:
        default: "Subnet 2: CIDR Block"
      SubnetAssignPublicIp2:
        default: "Subnet 2: Map Public IP"

      SubnetAvailabilityZone3:
        default: "Subnet 3: AZ"
      SubnetCidrBlock3:
        default: "Subnet 3: CIDR Block"
      SubnetAssignPublicIp3:
        default: "Subnet 3: Map Public IP"

      SubnetAvailabilityZone4:
        default: "Subnet 4: AZ"
      SubnetCidrBlock4:
        default: "Subnet 4: CIDR Block"
      SubnetAssignPublicIp4:
        default: "Subnet 4: Map Public IP"
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CidrBlock
      Tags:
      - Key: Name
        Value: !Ref VpcName
      - Key: Stack
        Value: !Ref AWS::StackName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: VPC
        Value: !Ref AWS::StackName
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  DefaultRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: VPC
        Value: !Ref AWS::StackName
      - Key: Network
        Value: Default
  DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref DefaultRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Subnet1:
    Condition: ProvisionSubnet1
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidrBlock1
      AvailabilityZone: !Ref SubnetAvailabilityZone1
      MapPublicIpOnLaunch:
        Fn::If: [EnablePublicIp1, "true", "false"]
      Tags:
      - Key: Name
        Value: !Sub "${VpcName}: ${SubnetAvailabilityZone1}"
  SubnetRoute1:
    Condition: ProvisionSubnet1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DefaultRouteTable
      SubnetId: !Ref Subnet1

  Subnet2:
    Condition: ProvisionSubnet2
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidrBlock2
      AvailabilityZone: !Ref SubnetAvailabilityZone2
      MapPublicIpOnLaunch:
        Fn::If: [EnablePublicIp2, "true", "false"]
      Tags:
      - Key: Name
        Value: !Sub "${VpcName}: ${SubnetAvailabilityZone2}"
  SubnetRoute2:
    Condition: ProvisionSubnet2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DefaultRouteTable
      SubnetId: !Ref Subnet2

  Subnet3:
    Condition: ProvisionSubnet3
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidrBlock3
      AvailabilityZone: !Ref SubnetAvailabilityZone3
      MapPublicIpOnLaunch:
        Fn::If: [EnablePublicIp3, "true", "false"]
      Tags:
      - Key: Name
        Value: !Sub "${VpcName}: ${SubnetAvailabilityZone3}"
  SubnetRoute3:
    Condition: ProvisionSubnet3
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DefaultRouteTable
      SubnetId: !Ref Subnet3

  Subnet4:
    Condition: ProvisionSubnet4
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidrBlock4
      AvailabilityZone: !Ref SubnetAvailabilityZone4
      MapPublicIpOnLaunch:
        Fn::If: [EnablePublicIp4, "true", "false"]
      Tags:
      - Key: Name
        Value: !Sub "${VpcName}: ${SubnetAvailabilityZone4}"
  SubnetRoute4:
    Condition: ProvisionSubnet4
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DefaultRouteTable
      SubnetId: !Ref Subnet4
Outputs:
  VpcId:
    Value: !Ref Vpc
    Description: "Export: <stackname>:VpcId"
    Export:
      Name: !Sub "${AWS::StackName}:VpcId"
  CidrBlock:
    Value: !Ref CidrBlock
    Description: "Export: <stackname>:CidrBlock"
    Export:
      Name: !Sub "${AWS::StackName}:CidrBlock"
